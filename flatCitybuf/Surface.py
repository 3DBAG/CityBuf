# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatCitybuf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from flatCitybuf.Ring import Ring
from typing import Optional
np = import_numpy()

class Surface(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Surface()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSurface(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Surface
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Surface
    def Rings(self, j: int) -> Optional[Ring]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Ring()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Surface
    def RingsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Surface
    def RingsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Surface
    def SemanticObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SurfaceStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    SurfaceStart(builder)

def SurfaceAddRings(builder: flatbuffers.Builder, rings: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rings), 0)

def AddRings(builder: flatbuffers.Builder, rings: int):
    SurfaceAddRings(builder, rings)

def SurfaceStartRingsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartRingsVector(builder, numElems: int) -> int:
    return SurfaceStartRingsVector(builder, numElems)

def SurfaceAddSemanticObjectId(builder: flatbuffers.Builder, semanticObjectId: int):
    builder.PrependUint32Slot(1, semanticObjectId, 0)

def AddSemanticObjectId(builder: flatbuffers.Builder, semanticObjectId: int):
    SurfaceAddSemanticObjectId(builder, semanticObjectId)

def SurfaceEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SurfaceEnd(builder)
