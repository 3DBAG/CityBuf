namespace flatCitybuf;

enum ColumnType: ubyte {
  Byte,                         // Signed 8-bit integer
  UByte,                        // Unsigned 8-bit integer
  Bool,                         // Boolean
  Short,                        // Signed 16-bit integer
  UShort,                       // Unsigned 16-bit integer
  Int,                          // Signed 32-bit integer
  UInt,                         // Unsigned 32-bit integer
  Long,                         // Signed 64-bit integer
  ULong,                        // Unsigned 64-bit integer
  Float,                        // Single precision floating point number
  Double,                       // Double precision floating point number
  String,                       // UTF8 string
  Json,                         // General JSON type intended to be application specific
  DateTime,                     // ISO 8601 date time
  Binary                        // General binary type intended to be application specific
}

table Column {
  name: string (required);      // Column name
  type: ColumnType;             // Column type
  title: string;                // Column title
  description: string;          // Column description (intended for free form long text)
  // width: int = -1;              // Column values expected width (-1 = unknown) (currently only used to indicate the number of characters in strings)
  // precision: int = -1;          // Column values expected precision (-1 = unknown) as defined by SQL
  // scale: int = -1;              // Column values expected scale (-1 = unknown) as defined by SQL
  nullable: bool = true;        // Column values expected nullability
  unique: bool = false;         // Column values expected uniqueness
  primary_key: bool = false;    // Indicates this column has been (part of) a primary key
  metadata: string;             // Column metadata (intended to be application specific and suggested to be structured fx. JSON)
}

table Crs {
  authority: string;            // Case-insensitive name of the defining organization e.g. EPSG or epsg (NULL = EPSG)
  version: int;                 // Version of the Spatial Reference System assigned by the organization (0 = not defined)
  code: int;                    // Numeric ID of the Spatial Reference System assigned by the organization (0 = unknown)
}

struct Vector {
  x:double;
  y:double;
  z:double;
}

struct Transform {
  scale: Vector;
  translate: Vector;
}

struct GeographicalExtent {
  min: Vector;
  max: Vector;
}

//TODO: make metadata compatible with CityJSON
table Header {
  // name: string;                 // Dataset name
  geographical_extent: GeographicalExtent;           // Bounds
  transform: Transform;         // Transformation vectors
  columns: [Column];            // Attribute columns schema (can be omitted if per feature schema)
  features_count: ulong;        // Number of features in the dataset (0 = unknown)
  // index_node_size: ushort = 16; // Index node size (0 = no index)
  crs: Crs;                     // Spatial Reference System
  // title: string;                // Dataset title
  // description: string;          // Dataset description (intended for free form long text)
  metadata: string;             // Dataset metadata (intended to be application specific and suggested to be structured fx. JSON)
}

root_type Header;