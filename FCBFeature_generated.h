// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FCBFEATURE_FLATCITYBUF_H_
#define FLATBUFFERS_GENERATED_FCBFEATURE_FLATCITYBUF_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace flatCitybuf {

struct Column;
struct ColumnBuilder;

struct Crs;
struct CrsBuilder;

struct Vector;

struct Transform;

struct GeographicalExtent;

struct Header;
struct HeaderBuilder;

struct Vertex;

struct CityFBFeature;
struct CityFBFeatureBuilder;

struct CityObject;
struct CityObjectBuilder;

struct Geometry;
struct GeometryBuilder;

struct Point;
struct PointBuilder;

struct MultiPoint;
struct MultiPointBuilder;

struct LineString;
struct LineStringBuilder;

struct MultiLineString;
struct MultiLineStringBuilder;

struct Ring;
struct RingBuilder;

struct Surface;
struct SurfaceBuilder;

struct MultiSurface;
struct MultiSurfaceBuilder;

struct CompositeSurface;
struct CompositeSurfaceBuilder;

struct Shell;
struct ShellBuilder;

struct Solid;
struct SolidBuilder;

struct MultiSolid;
struct MultiSolidBuilder;

struct CompositeSolid;
struct CompositeSolidBuilder;

struct SemanticObject;
struct SemanticObjectBuilder;

enum ColumnType : uint8_t {
  ColumnType_Byte = 0,
  ColumnType_UByte = 1,
  ColumnType_Bool = 2,
  ColumnType_Short = 3,
  ColumnType_UShort = 4,
  ColumnType_Int = 5,
  ColumnType_UInt = 6,
  ColumnType_Long = 7,
  ColumnType_ULong = 8,
  ColumnType_Float = 9,
  ColumnType_Double = 10,
  ColumnType_String = 11,
  ColumnType_Json = 12,
  ColumnType_DateTime = 13,
  ColumnType_Binary = 14,
  ColumnType_MIN = ColumnType_Byte,
  ColumnType_MAX = ColumnType_Binary
};

inline const ColumnType (&EnumValuesColumnType())[15] {
  static const ColumnType values[] = {
    ColumnType_Byte,
    ColumnType_UByte,
    ColumnType_Bool,
    ColumnType_Short,
    ColumnType_UShort,
    ColumnType_Int,
    ColumnType_UInt,
    ColumnType_Long,
    ColumnType_ULong,
    ColumnType_Float,
    ColumnType_Double,
    ColumnType_String,
    ColumnType_Json,
    ColumnType_DateTime,
    ColumnType_Binary
  };
  return values;
}

inline const char * const *EnumNamesColumnType() {
  static const char * const names[16] = {
    "Byte",
    "UByte",
    "Bool",
    "Short",
    "UShort",
    "Int",
    "UInt",
    "Long",
    "ULong",
    "Float",
    "Double",
    "String",
    "Json",
    "DateTime",
    "Binary",
    nullptr
  };
  return names;
}

inline const char *EnumNameColumnType(ColumnType e) {
  if (::flatbuffers::IsOutRange(e, ColumnType_Byte, ColumnType_Binary)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColumnType()[index];
}

enum CityObjectType : uint8_t {
  CityObjectType_Bridge = 0,
  CityObjectType_BridgePart = 1,
  CityObjectType_BridgeInstallation = 2,
  CityObjectType_BridgeConstructiveElement = 3,
  CityObjectType_BridgeRoom = 4,
  CityObjectType_BridgeFurniture = 5,
  CityObjectType_Building = 6,
  CityObjectType_BuildingPart = 7,
  CityObjectType_BuildingInstallation = 8,
  CityObjectType_BuildingConstructiveElement = 9,
  CityObjectType_BuildingFurniture = 10,
  CityObjectType_BuildingStorey = 11,
  CityObjectType_BuildingRoom = 12,
  CityObjectType_BuildingUnit = 13,
  CityObjectType_CityFurniture = 14,
  CityObjectType_CityObjectGroup = 15,
  CityObjectType_GenericCityObject = 16,
  CityObjectType_LandUse = 17,
  CityObjectType_OtherConstruction = 18,
  CityObjectType_PlantCover = 19,
  CityObjectType_SolitaryVegetationObject = 20,
  CityObjectType_TINRelief = 21,
  CityObjectType_Road = 22,
  CityObjectType_Railway = 23,
  CityObjectType_Waterway = 24,
  CityObjectType_TransportSquare = 25,
  CityObjectType_Tunnel = 26,
  CityObjectType_TunnelPart = 27,
  CityObjectType_TunnelInstallation = 28,
  CityObjectType_TunnelConstructiveElement = 29,
  CityObjectType_TunnelHollowSpace = 30,
  CityObjectType_TunnelFurniture = 31,
  CityObjectType_WaterBody = 32,
  CityObjectType_MIN = CityObjectType_Bridge,
  CityObjectType_MAX = CityObjectType_WaterBody
};

inline const CityObjectType (&EnumValuesCityObjectType())[33] {
  static const CityObjectType values[] = {
    CityObjectType_Bridge,
    CityObjectType_BridgePart,
    CityObjectType_BridgeInstallation,
    CityObjectType_BridgeConstructiveElement,
    CityObjectType_BridgeRoom,
    CityObjectType_BridgeFurniture,
    CityObjectType_Building,
    CityObjectType_BuildingPart,
    CityObjectType_BuildingInstallation,
    CityObjectType_BuildingConstructiveElement,
    CityObjectType_BuildingFurniture,
    CityObjectType_BuildingStorey,
    CityObjectType_BuildingRoom,
    CityObjectType_BuildingUnit,
    CityObjectType_CityFurniture,
    CityObjectType_CityObjectGroup,
    CityObjectType_GenericCityObject,
    CityObjectType_LandUse,
    CityObjectType_OtherConstruction,
    CityObjectType_PlantCover,
    CityObjectType_SolitaryVegetationObject,
    CityObjectType_TINRelief,
    CityObjectType_Road,
    CityObjectType_Railway,
    CityObjectType_Waterway,
    CityObjectType_TransportSquare,
    CityObjectType_Tunnel,
    CityObjectType_TunnelPart,
    CityObjectType_TunnelInstallation,
    CityObjectType_TunnelConstructiveElement,
    CityObjectType_TunnelHollowSpace,
    CityObjectType_TunnelFurniture,
    CityObjectType_WaterBody
  };
  return values;
}

inline const char * const *EnumNamesCityObjectType() {
  static const char * const names[34] = {
    "Bridge",
    "BridgePart",
    "BridgeInstallation",
    "BridgeConstructiveElement",
    "BridgeRoom",
    "BridgeFurniture",
    "Building",
    "BuildingPart",
    "BuildingInstallation",
    "BuildingConstructiveElement",
    "BuildingFurniture",
    "BuildingStorey",
    "BuildingRoom",
    "BuildingUnit",
    "CityFurniture",
    "CityObjectGroup",
    "GenericCityObject",
    "LandUse",
    "OtherConstruction",
    "PlantCover",
    "SolitaryVegetationObject",
    "TINRelief",
    "Road",
    "Railway",
    "Waterway",
    "TransportSquare",
    "Tunnel",
    "TunnelPart",
    "TunnelInstallation",
    "TunnelConstructiveElement",
    "TunnelHollowSpace",
    "TunnelFurniture",
    "WaterBody",
    nullptr
  };
  return names;
}

inline const char *EnumNameCityObjectType(CityObjectType e) {
  if (::flatbuffers::IsOutRange(e, CityObjectType_Bridge, CityObjectType_WaterBody)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCityObjectType()[index];
}

enum SemanticSurfaceType : uint8_t {
  SemanticSurfaceType_RoofSurface = 0,
  SemanticSurfaceType_GroundSurface = 1,
  SemanticSurfaceType_WallSurface = 2,
  SemanticSurfaceType_ClosureSurface = 3,
  SemanticSurfaceType_OuterCeilingSurface = 4,
  SemanticSurfaceType_OuterFloorSurface = 5,
  SemanticSurfaceType_Window = 6,
  SemanticSurfaceType_Door = 7,
  SemanticSurfaceType_InteriorWallSurface = 8,
  SemanticSurfaceType_CeilingSurface = 9,
  SemanticSurfaceType_FloorSurface = 10,
  SemanticSurfaceType_WaterSurface = 11,
  SemanticSurfaceType_WaterGroundSurface = 12,
  SemanticSurfaceType_WaterClosureSurface = 13,
  SemanticSurfaceType_TrafficArea = 14,
  SemanticSurfaceType_AuxiliaryTrafficArea = 15,
  SemanticSurfaceType_TransportationMarking = 16,
  SemanticSurfaceType_TransportationHole = 17,
  SemanticSurfaceType_MIN = SemanticSurfaceType_RoofSurface,
  SemanticSurfaceType_MAX = SemanticSurfaceType_TransportationHole
};

inline const SemanticSurfaceType (&EnumValuesSemanticSurfaceType())[18] {
  static const SemanticSurfaceType values[] = {
    SemanticSurfaceType_RoofSurface,
    SemanticSurfaceType_GroundSurface,
    SemanticSurfaceType_WallSurface,
    SemanticSurfaceType_ClosureSurface,
    SemanticSurfaceType_OuterCeilingSurface,
    SemanticSurfaceType_OuterFloorSurface,
    SemanticSurfaceType_Window,
    SemanticSurfaceType_Door,
    SemanticSurfaceType_InteriorWallSurface,
    SemanticSurfaceType_CeilingSurface,
    SemanticSurfaceType_FloorSurface,
    SemanticSurfaceType_WaterSurface,
    SemanticSurfaceType_WaterGroundSurface,
    SemanticSurfaceType_WaterClosureSurface,
    SemanticSurfaceType_TrafficArea,
    SemanticSurfaceType_AuxiliaryTrafficArea,
    SemanticSurfaceType_TransportationMarking,
    SemanticSurfaceType_TransportationHole
  };
  return values;
}

inline const char * const *EnumNamesSemanticSurfaceType() {
  static const char * const names[19] = {
    "RoofSurface",
    "GroundSurface",
    "WallSurface",
    "ClosureSurface",
    "OuterCeilingSurface",
    "OuterFloorSurface",
    "Window",
    "Door",
    "InteriorWallSurface",
    "CeilingSurface",
    "FloorSurface",
    "WaterSurface",
    "WaterGroundSurface",
    "WaterClosureSurface",
    "TrafficArea",
    "AuxiliaryTrafficArea",
    "TransportationMarking",
    "TransportationHole",
    nullptr
  };
  return names;
}

inline const char *EnumNameSemanticSurfaceType(SemanticSurfaceType e) {
  if (::flatbuffers::IsOutRange(e, SemanticSurfaceType_RoofSurface, SemanticSurfaceType_TransportationHole)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSemanticSurfaceType()[index];
}

enum Boundaries : uint8_t {
  Boundaries_NONE = 0,
  Boundaries_MultiPoint = 1,
  Boundaries_MultiLineString = 2,
  Boundaries_MultiSurface = 3,
  Boundaries_CompositeSurface = 4,
  Boundaries_Solid = 5,
  Boundaries_MultiSolid = 6,
  Boundaries_CompositeSolid = 7,
  Boundaries_MIN = Boundaries_NONE,
  Boundaries_MAX = Boundaries_CompositeSolid
};

inline const Boundaries (&EnumValuesBoundaries())[8] {
  static const Boundaries values[] = {
    Boundaries_NONE,
    Boundaries_MultiPoint,
    Boundaries_MultiLineString,
    Boundaries_MultiSurface,
    Boundaries_CompositeSurface,
    Boundaries_Solid,
    Boundaries_MultiSolid,
    Boundaries_CompositeSolid
  };
  return values;
}

inline const char * const *EnumNamesBoundaries() {
  static const char * const names[9] = {
    "NONE",
    "MultiPoint",
    "MultiLineString",
    "MultiSurface",
    "CompositeSurface",
    "Solid",
    "MultiSolid",
    "CompositeSolid",
    nullptr
  };
  return names;
}

inline const char *EnumNameBoundaries(Boundaries e) {
  if (::flatbuffers::IsOutRange(e, Boundaries_NONE, Boundaries_CompositeSolid)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBoundaries()[index];
}

template<typename T> struct BoundariesTraits {
  static const Boundaries enum_value = Boundaries_NONE;
};

template<> struct BoundariesTraits<flatCitybuf::MultiPoint> {
  static const Boundaries enum_value = Boundaries_MultiPoint;
};

template<> struct BoundariesTraits<flatCitybuf::MultiLineString> {
  static const Boundaries enum_value = Boundaries_MultiLineString;
};

template<> struct BoundariesTraits<flatCitybuf::MultiSurface> {
  static const Boundaries enum_value = Boundaries_MultiSurface;
};

template<> struct BoundariesTraits<flatCitybuf::CompositeSurface> {
  static const Boundaries enum_value = Boundaries_CompositeSurface;
};

template<> struct BoundariesTraits<flatCitybuf::Solid> {
  static const Boundaries enum_value = Boundaries_Solid;
};

template<> struct BoundariesTraits<flatCitybuf::MultiSolid> {
  static const Boundaries enum_value = Boundaries_MultiSolid;
};

template<> struct BoundariesTraits<flatCitybuf::CompositeSolid> {
  static const Boundaries enum_value = Boundaries_CompositeSolid;
};

bool VerifyBoundaries(::flatbuffers::Verifier &verifier, const void *obj, Boundaries type);
bool VerifyBoundariesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vector FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vector()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector(double _x, double _y, double _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Transform FLATBUFFERS_FINAL_CLASS {
 private:
  flatCitybuf::Vector scale_;
  flatCitybuf::Vector translate_;

 public:
  Transform()
      : scale_(),
        translate_() {
  }
  Transform(const flatCitybuf::Vector &_scale, const flatCitybuf::Vector &_translate)
      : scale_(_scale),
        translate_(_translate) {
  }
  const flatCitybuf::Vector &scale() const {
    return scale_;
  }
  const flatCitybuf::Vector &translate() const {
    return translate_;
  }
};
FLATBUFFERS_STRUCT_END(Transform, 48);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) GeographicalExtent FLATBUFFERS_FINAL_CLASS {
 private:
  flatCitybuf::Vector min_;
  flatCitybuf::Vector max_;

 public:
  GeographicalExtent()
      : min_(),
        max_() {
  }
  GeographicalExtent(const flatCitybuf::Vector &_min, const flatCitybuf::Vector &_max)
      : min_(_min),
        max_(_max) {
  }
  const flatCitybuf::Vector &min() const {
    return min_;
  }
  const flatCitybuf::Vector &max() const {
    return max_;
  }
};
FLATBUFFERS_STRUCT_END(GeographicalExtent, 48);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t z_;

 public:
  Vertex()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vertex(int32_t _x, int32_t _y, int32_t _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  int32_t z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 12);

struct Column FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ColumnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_TITLE = 8,
    VT_DESCRIPTION = 10,
    VT_NULLABLE = 12,
    VT_UNIQUE = 14,
    VT_PRIMARY_KEY = 16,
    VT_METADATA = 18
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  flatCitybuf::ColumnType type() const {
    return static_cast<flatCitybuf::ColumnType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool nullable() const {
    return GetField<uint8_t>(VT_NULLABLE, 1) != 0;
  }
  bool unique() const {
    return GetField<uint8_t>(VT_UNIQUE, 0) != 0;
  }
  bool primary_key() const {
    return GetField<uint8_t>(VT_PRIMARY_KEY, 0) != 0;
  }
  const ::flatbuffers::String *metadata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<uint8_t>(verifier, VT_NULLABLE, 1) &&
           VerifyField<uint8_t>(verifier, VT_UNIQUE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PRIMARY_KEY, 1) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           verifier.EndTable();
  }
};

struct ColumnBuilder {
  typedef Column Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Column::VT_NAME, name);
  }
  void add_type(flatCitybuf::ColumnType type) {
    fbb_.AddElement<uint8_t>(Column::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(Column::VT_TITLE, title);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Column::VT_DESCRIPTION, description);
  }
  void add_nullable(bool nullable) {
    fbb_.AddElement<uint8_t>(Column::VT_NULLABLE, static_cast<uint8_t>(nullable), 1);
  }
  void add_unique(bool unique) {
    fbb_.AddElement<uint8_t>(Column::VT_UNIQUE, static_cast<uint8_t>(unique), 0);
  }
  void add_primary_key(bool primary_key) {
    fbb_.AddElement<uint8_t>(Column::VT_PRIMARY_KEY, static_cast<uint8_t>(primary_key), 0);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::String> metadata) {
    fbb_.AddOffset(Column::VT_METADATA, metadata);
  }
  explicit ColumnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Column> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Column>(end);
    fbb_.Required(o, Column::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<Column> CreateColumn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    flatCitybuf::ColumnType type = flatCitybuf::ColumnType_Byte,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    bool nullable = true,
    bool unique = false,
    bool primary_key = false,
    ::flatbuffers::Offset<::flatbuffers::String> metadata = 0) {
  ColumnBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  builder_.add_description(description);
  builder_.add_title(title);
  builder_.add_name(name);
  builder_.add_primary_key(primary_key);
  builder_.add_unique(unique);
  builder_.add_nullable(nullable);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Column> CreateColumnDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatCitybuf::ColumnType type = flatCitybuf::ColumnType_Byte,
    const char *title = nullptr,
    const char *description = nullptr,
    bool nullable = true,
    bool unique = false,
    bool primary_key = false,
    const char *metadata = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  return flatCitybuf::CreateColumn(
      _fbb,
      name__,
      type,
      title__,
      description__,
      nullable,
      unique,
      primary_key,
      metadata__);
}

struct Crs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CrsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUTHORITY = 4,
    VT_VERSION = 6,
    VT_CODE = 8
  };
  const ::flatbuffers::String *authority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHORITY);
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 0);
  }
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AUTHORITY) &&
           verifier.VerifyString(authority()) &&
           VerifyField<int32_t>(verifier, VT_VERSION, 4) &&
           VerifyField<int32_t>(verifier, VT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct CrsBuilder {
  typedef Crs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_authority(::flatbuffers::Offset<::flatbuffers::String> authority) {
    fbb_.AddOffset(Crs::VT_AUTHORITY, authority);
  }
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(Crs::VT_VERSION, version, 0);
  }
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(Crs::VT_CODE, code, 0);
  }
  explicit CrsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Crs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Crs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Crs> CreateCrs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> authority = 0,
    int32_t version = 0,
    int32_t code = 0) {
  CrsBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_version(version);
  builder_.add_authority(authority);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Crs> CreateCrsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *authority = nullptr,
    int32_t version = 0,
    int32_t code = 0) {
  auto authority__ = authority ? _fbb.CreateString(authority) : 0;
  return flatCitybuf::CreateCrs(
      _fbb,
      authority__,
      version,
      code);
}

struct Header FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOGRAPHICAL_EXTENT = 4,
    VT_TRANSFORM = 6,
    VT_COLUMNS = 8,
    VT_FEATURES_COUNT = 10,
    VT_CRS = 12,
    VT_METADATA = 14
  };
  const flatCitybuf::GeographicalExtent *geographical_extent() const {
    return GetStruct<const flatCitybuf::GeographicalExtent *>(VT_GEOGRAPHICAL_EXTENT);
  }
  const flatCitybuf::Transform *transform() const {
    return GetStruct<const flatCitybuf::Transform *>(VT_TRANSFORM);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>> *columns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>> *>(VT_COLUMNS);
  }
  uint64_t features_count() const {
    return GetField<uint64_t>(VT_FEATURES_COUNT, 0);
  }
  const flatCitybuf::Crs *crs() const {
    return GetPointer<const flatCitybuf::Crs *>(VT_CRS);
  }
  const ::flatbuffers::String *metadata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatCitybuf::GeographicalExtent>(verifier, VT_GEOGRAPHICAL_EXTENT, 8) &&
           VerifyField<flatCitybuf::Transform>(verifier, VT_TRANSFORM, 8) &&
           VerifyOffset(verifier, VT_COLUMNS) &&
           verifier.VerifyVector(columns()) &&
           verifier.VerifyVectorOfTables(columns()) &&
           VerifyField<uint64_t>(verifier, VT_FEATURES_COUNT, 8) &&
           VerifyOffset(verifier, VT_CRS) &&
           verifier.VerifyTable(crs()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geographical_extent(const flatCitybuf::GeographicalExtent *geographical_extent) {
    fbb_.AddStruct(Header::VT_GEOGRAPHICAL_EXTENT, geographical_extent);
  }
  void add_transform(const flatCitybuf::Transform *transform) {
    fbb_.AddStruct(Header::VT_TRANSFORM, transform);
  }
  void add_columns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>>> columns) {
    fbb_.AddOffset(Header::VT_COLUMNS, columns);
  }
  void add_features_count(uint64_t features_count) {
    fbb_.AddElement<uint64_t>(Header::VT_FEATURES_COUNT, features_count, 0);
  }
  void add_crs(::flatbuffers::Offset<flatCitybuf::Crs> crs) {
    fbb_.AddOffset(Header::VT_CRS, crs);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::String> metadata) {
    fbb_.AddOffset(Header::VT_METADATA, metadata);
  }
  explicit HeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Header> CreateHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const flatCitybuf::GeographicalExtent *geographical_extent = nullptr,
    const flatCitybuf::Transform *transform = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>>> columns = 0,
    uint64_t features_count = 0,
    ::flatbuffers::Offset<flatCitybuf::Crs> crs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> metadata = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_features_count(features_count);
  builder_.add_metadata(metadata);
  builder_.add_crs(crs);
  builder_.add_columns(columns);
  builder_.add_transform(transform);
  builder_.add_geographical_extent(geographical_extent);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Header> CreateHeaderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const flatCitybuf::GeographicalExtent *geographical_extent = nullptr,
    const flatCitybuf::Transform *transform = nullptr,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Column>> *columns = nullptr,
    uint64_t features_count = 0,
    ::flatbuffers::Offset<flatCitybuf::Crs> crs = 0,
    const char *metadata = nullptr) {
  auto columns__ = columns ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Column>>(*columns) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  return flatCitybuf::CreateHeader(
      _fbb,
      geographical_extent,
      transform,
      columns__,
      features_count,
      crs,
      metadata__);
}

struct CityFBFeature FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CityFBFeatureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_OBJECTS = 6,
    VT_VERTICES = 8
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::CityObject>> *objects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::CityObject>> *>(VT_OBJECTS);
  }
  const ::flatbuffers::Vector<const flatCitybuf::Vertex *> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<const flatCitybuf::Vertex *> *>(VT_VERTICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.EndTable();
  }
};

struct CityFBFeatureBuilder {
  typedef CityFBFeature Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(CityFBFeature::VT_ID, id);
  }
  void add_objects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::CityObject>>> objects) {
    fbb_.AddOffset(CityFBFeature::VT_OBJECTS, objects);
  }
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<const flatCitybuf::Vertex *>> vertices) {
    fbb_.AddOffset(CityFBFeature::VT_VERTICES, vertices);
  }
  explicit CityFBFeatureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CityFBFeature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CityFBFeature>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CityFBFeature> CreateCityFBFeature(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::CityObject>>> objects = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatCitybuf::Vertex *>> vertices = 0) {
  CityFBFeatureBuilder builder_(_fbb);
  builder_.add_vertices(vertices);
  builder_.add_objects(objects);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CityFBFeature> CreateCityFBFeatureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    std::vector<::flatbuffers::Offset<flatCitybuf::CityObject>> *objects = nullptr,
    const std::vector<flatCitybuf::Vertex> *vertices = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto objects__ = objects ? _fbb.CreateVectorOfSortedTables<flatCitybuf::CityObject>(objects) : 0;
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<flatCitybuf::Vertex>(*vertices) : 0;
  return flatCitybuf::CreateCityFBFeature(
      _fbb,
      id__,
      objects__,
      vertices__);
}

struct CityObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CityObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_GEOGRAPHICAL_EXTENT = 8,
    VT_GEOMETRY = 10,
    VT_ATTRIBUTES = 12,
    VT_COLUMNS = 14,
    VT_CHILDREN = 16,
    VT_CHILDREN_ROLES = 18,
    VT_PARENTS = 20
  };
  flatCitybuf::CityObjectType type() const {
    return static_cast<flatCitybuf::CityObjectType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  bool KeyCompareLessThan(const CityObject * const o) const {
    return *id() < *o->id();
  }
  int KeyCompareWithValue(const char *_id) const {
    return strcmp(id()->c_str(), _id);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _id) const {
    if (id()->c_str() < _id) return -1;
    if (_id < id()->c_str()) return 1;
    return 0;
  }
  const flatCitybuf::GeographicalExtent *geographical_extent() const {
    return GetStruct<const flatCitybuf::GeographicalExtent *>(VT_GEOGRAPHICAL_EXTENT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Geometry>> *geometry() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Geometry>> *>(VT_GEOMETRY);
  }
  const ::flatbuffers::Vector<uint8_t> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ATTRIBUTES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>> *columns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>> *>(VT_COLUMNS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CHILDREN);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *children_roles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CHILDREN_ROLES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *parents() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PARENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<flatCitybuf::GeographicalExtent>(verifier, VT_GEOGRAPHICAL_EXTENT, 8) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyVector(geometry()) &&
           verifier.VerifyVectorOfTables(geometry()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           VerifyOffset(verifier, VT_COLUMNS) &&
           verifier.VerifyVector(columns()) &&
           verifier.VerifyVectorOfTables(columns()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfStrings(children()) &&
           VerifyOffset(verifier, VT_CHILDREN_ROLES) &&
           verifier.VerifyVector(children_roles()) &&
           verifier.VerifyVectorOfStrings(children_roles()) &&
           VerifyOffset(verifier, VT_PARENTS) &&
           verifier.VerifyVector(parents()) &&
           verifier.VerifyVectorOfStrings(parents()) &&
           verifier.EndTable();
  }
};

struct CityObjectBuilder {
  typedef CityObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(flatCitybuf::CityObjectType type) {
    fbb_.AddElement<uint8_t>(CityObject::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(CityObject::VT_ID, id);
  }
  void add_geographical_extent(const flatCitybuf::GeographicalExtent *geographical_extent) {
    fbb_.AddStruct(CityObject::VT_GEOGRAPHICAL_EXTENT, geographical_extent);
  }
  void add_geometry(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Geometry>>> geometry) {
    fbb_.AddOffset(CityObject::VT_GEOMETRY, geometry);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> attributes) {
    fbb_.AddOffset(CityObject::VT_ATTRIBUTES, attributes);
  }
  void add_columns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>>> columns) {
    fbb_.AddOffset(CityObject::VT_COLUMNS, columns);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> children) {
    fbb_.AddOffset(CityObject::VT_CHILDREN, children);
  }
  void add_children_roles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> children_roles) {
    fbb_.AddOffset(CityObject::VT_CHILDREN_ROLES, children_roles);
  }
  void add_parents(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> parents) {
    fbb_.AddOffset(CityObject::VT_PARENTS, parents);
  }
  explicit CityObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CityObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CityObject>(end);
    fbb_.Required(o, CityObject::VT_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<CityObject> CreateCityObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    flatCitybuf::CityObjectType type = flatCitybuf::CityObjectType_Bridge,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    const flatCitybuf::GeographicalExtent *geographical_extent = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Geometry>>> geometry = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> attributes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Column>>> columns = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> children = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> children_roles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> parents = 0) {
  CityObjectBuilder builder_(_fbb);
  builder_.add_parents(parents);
  builder_.add_children_roles(children_roles);
  builder_.add_children(children);
  builder_.add_columns(columns);
  builder_.add_attributes(attributes);
  builder_.add_geometry(geometry);
  builder_.add_geographical_extent(geographical_extent);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CityObject> CreateCityObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    flatCitybuf::CityObjectType type = flatCitybuf::CityObjectType_Bridge,
    const char *id = nullptr,
    const flatCitybuf::GeographicalExtent *geographical_extent = nullptr,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Geometry>> *geometry = nullptr,
    const std::vector<uint8_t> *attributes = nullptr,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Column>> *columns = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *children = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *children_roles = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *parents = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto geometry__ = geometry ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Geometry>>(*geometry) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<uint8_t>(*attributes) : 0;
  auto columns__ = columns ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Column>>(*columns) : 0;
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*children) : 0;
  auto children_roles__ = children_roles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*children_roles) : 0;
  auto parents__ = parents ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*parents) : 0;
  return flatCitybuf::CreateCityObject(
      _fbb,
      type,
      id__,
      geographical_extent,
      geometry__,
      attributes__,
      columns__,
      children__,
      children_roles__,
      parents__);
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOD = 4,
    VT_BOUNDARIES_TYPE = 6,
    VT_BOUNDARIES = 8,
    VT_SEMANTICS_OBJECTS = 10
  };
  const ::flatbuffers::String *lod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOD);
  }
  flatCitybuf::Boundaries boundaries_type() const {
    return static_cast<flatCitybuf::Boundaries>(GetField<uint8_t>(VT_BOUNDARIES_TYPE, 0));
  }
  const void *boundaries() const {
    return GetPointer<const void *>(VT_BOUNDARIES);
  }
  template<typename T> const T *boundaries_as() const;
  const flatCitybuf::MultiPoint *boundaries_as_MultiPoint() const {
    return boundaries_type() == flatCitybuf::Boundaries_MultiPoint ? static_cast<const flatCitybuf::MultiPoint *>(boundaries()) : nullptr;
  }
  const flatCitybuf::MultiLineString *boundaries_as_MultiLineString() const {
    return boundaries_type() == flatCitybuf::Boundaries_MultiLineString ? static_cast<const flatCitybuf::MultiLineString *>(boundaries()) : nullptr;
  }
  const flatCitybuf::MultiSurface *boundaries_as_MultiSurface() const {
    return boundaries_type() == flatCitybuf::Boundaries_MultiSurface ? static_cast<const flatCitybuf::MultiSurface *>(boundaries()) : nullptr;
  }
  const flatCitybuf::CompositeSurface *boundaries_as_CompositeSurface() const {
    return boundaries_type() == flatCitybuf::Boundaries_CompositeSurface ? static_cast<const flatCitybuf::CompositeSurface *>(boundaries()) : nullptr;
  }
  const flatCitybuf::Solid *boundaries_as_Solid() const {
    return boundaries_type() == flatCitybuf::Boundaries_Solid ? static_cast<const flatCitybuf::Solid *>(boundaries()) : nullptr;
  }
  const flatCitybuf::MultiSolid *boundaries_as_MultiSolid() const {
    return boundaries_type() == flatCitybuf::Boundaries_MultiSolid ? static_cast<const flatCitybuf::MultiSolid *>(boundaries()) : nullptr;
  }
  const flatCitybuf::CompositeSolid *boundaries_as_CompositeSolid() const {
    return boundaries_type() == flatCitybuf::Boundaries_CompositeSolid ? static_cast<const flatCitybuf::CompositeSolid *>(boundaries()) : nullptr;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::SemanticObject>> *semantics_objects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::SemanticObject>> *>(VT_SEMANTICS_OBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOD) &&
           verifier.VerifyString(lod()) &&
           VerifyField<uint8_t>(verifier, VT_BOUNDARIES_TYPE, 1) &&
           VerifyOffset(verifier, VT_BOUNDARIES) &&
           VerifyBoundaries(verifier, boundaries(), boundaries_type()) &&
           VerifyOffset(verifier, VT_SEMANTICS_OBJECTS) &&
           verifier.VerifyVector(semantics_objects()) &&
           verifier.VerifyVectorOfTables(semantics_objects()) &&
           verifier.EndTable();
  }
};

template<> inline const flatCitybuf::MultiPoint *Geometry::boundaries_as<flatCitybuf::MultiPoint>() const {
  return boundaries_as_MultiPoint();
}

template<> inline const flatCitybuf::MultiLineString *Geometry::boundaries_as<flatCitybuf::MultiLineString>() const {
  return boundaries_as_MultiLineString();
}

template<> inline const flatCitybuf::MultiSurface *Geometry::boundaries_as<flatCitybuf::MultiSurface>() const {
  return boundaries_as_MultiSurface();
}

template<> inline const flatCitybuf::CompositeSurface *Geometry::boundaries_as<flatCitybuf::CompositeSurface>() const {
  return boundaries_as_CompositeSurface();
}

template<> inline const flatCitybuf::Solid *Geometry::boundaries_as<flatCitybuf::Solid>() const {
  return boundaries_as_Solid();
}

template<> inline const flatCitybuf::MultiSolid *Geometry::boundaries_as<flatCitybuf::MultiSolid>() const {
  return boundaries_as_MultiSolid();
}

template<> inline const flatCitybuf::CompositeSolid *Geometry::boundaries_as<flatCitybuf::CompositeSolid>() const {
  return boundaries_as_CompositeSolid();
}

struct GeometryBuilder {
  typedef Geometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lod(::flatbuffers::Offset<::flatbuffers::String> lod) {
    fbb_.AddOffset(Geometry::VT_LOD, lod);
  }
  void add_boundaries_type(flatCitybuf::Boundaries boundaries_type) {
    fbb_.AddElement<uint8_t>(Geometry::VT_BOUNDARIES_TYPE, static_cast<uint8_t>(boundaries_type), 0);
  }
  void add_boundaries(::flatbuffers::Offset<void> boundaries) {
    fbb_.AddOffset(Geometry::VT_BOUNDARIES, boundaries);
  }
  void add_semantics_objects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::SemanticObject>>> semantics_objects) {
    fbb_.AddOffset(Geometry::VT_SEMANTICS_OBJECTS, semantics_objects);
  }
  explicit GeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geometry> CreateGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lod = 0,
    flatCitybuf::Boundaries boundaries_type = flatCitybuf::Boundaries_NONE,
    ::flatbuffers::Offset<void> boundaries = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::SemanticObject>>> semantics_objects = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_semantics_objects(semantics_objects);
  builder_.add_boundaries(boundaries);
  builder_.add_lod(lod);
  builder_.add_boundaries_type(boundaries_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Geometry> CreateGeometryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lod = nullptr,
    flatCitybuf::Boundaries boundaries_type = flatCitybuf::Boundaries_NONE,
    ::flatbuffers::Offset<void> boundaries = 0,
    const std::vector<::flatbuffers::Offset<flatCitybuf::SemanticObject>> *semantics_objects = nullptr) {
  auto lod__ = lod ? _fbb.CreateString(lod) : 0;
  auto semantics_objects__ = semantics_objects ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::SemanticObject>>(*semantics_objects) : 0;
  return flatCitybuf::CreateGeometry(
      _fbb,
      lod__,
      boundaries_type,
      boundaries,
      semantics_objects__);
}

struct Point FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_SEMANTIC_OBJECT_ID = 6
  };
  uint32_t index() const {
    return GetField<uint32_t>(VT_INDEX, 0);
  }
  uint32_t semantic_object_id() const {
    return GetField<uint32_t>(VT_SEMANTIC_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INDEX, 4) &&
           VerifyField<uint32_t>(verifier, VT_SEMANTIC_OBJECT_ID, 4) &&
           verifier.EndTable();
  }
};

struct PointBuilder {
  typedef Point Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_index(uint32_t index) {
    fbb_.AddElement<uint32_t>(Point::VT_INDEX, index, 0);
  }
  void add_semantic_object_id(uint32_t semantic_object_id) {
    fbb_.AddElement<uint32_t>(Point::VT_SEMANTIC_OBJECT_ID, semantic_object_id, 0);
  }
  explicit PointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Point> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Point>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Point> CreatePoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t index = 0,
    uint32_t semantic_object_id = 0) {
  PointBuilder builder_(_fbb);
  builder_.add_semantic_object_id(semantic_object_id);
  builder_.add_index(index);
  return builder_.Finish();
}

struct MultiPoint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MultiPointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Point>> *points() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Point>> *>(VT_POINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.VerifyVectorOfTables(points()) &&
           verifier.EndTable();
  }
};

struct MultiPointBuilder {
  typedef MultiPoint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Point>>> points) {
    fbb_.AddOffset(MultiPoint::VT_POINTS, points);
  }
  explicit MultiPointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MultiPoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MultiPoint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MultiPoint> CreateMultiPoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Point>>> points = 0) {
  MultiPointBuilder builder_(_fbb);
  builder_.add_points(points);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MultiPoint> CreateMultiPointDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Point>> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Point>>(*points) : 0;
  return flatCitybuf::CreateMultiPoint(
      _fbb,
      points__);
}

struct LineString FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LineStringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4,
    VT_SEMANTIC_OBJECT_ID = 6
  };
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  uint32_t semantic_object_id() const {
    return GetField<uint32_t>(VT_SEMANTIC_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyField<uint32_t>(verifier, VT_SEMANTIC_OBJECT_ID, 4) &&
           verifier.EndTable();
  }
};

struct LineStringBuilder {
  typedef LineString Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(LineString::VT_INDICES, indices);
  }
  void add_semantic_object_id(uint32_t semantic_object_id) {
    fbb_.AddElement<uint32_t>(LineString::VT_SEMANTIC_OBJECT_ID, semantic_object_id, 0);
  }
  explicit LineStringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LineString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LineString>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LineString> CreateLineString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0,
    uint32_t semantic_object_id = 0) {
  LineStringBuilder builder_(_fbb);
  builder_.add_semantic_object_id(semantic_object_id);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LineString> CreateLineStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *indices = nullptr,
    uint32_t semantic_object_id = 0) {
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return flatCitybuf::CreateLineString(
      _fbb,
      indices__,
      semantic_object_id);
}

struct MultiLineString FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MultiLineStringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINE_STRINGS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::LineString>> *line_strings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::LineString>> *>(VT_LINE_STRINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LINE_STRINGS) &&
           verifier.VerifyVector(line_strings()) &&
           verifier.VerifyVectorOfTables(line_strings()) &&
           verifier.EndTable();
  }
};

struct MultiLineStringBuilder {
  typedef MultiLineString Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_line_strings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::LineString>>> line_strings) {
    fbb_.AddOffset(MultiLineString::VT_LINE_STRINGS, line_strings);
  }
  explicit MultiLineStringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MultiLineString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MultiLineString>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MultiLineString> CreateMultiLineString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::LineString>>> line_strings = 0) {
  MultiLineStringBuilder builder_(_fbb);
  builder_.add_line_strings(line_strings);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MultiLineString> CreateMultiLineStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::LineString>> *line_strings = nullptr) {
  auto line_strings__ = line_strings ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::LineString>>(*line_strings) : 0;
  return flatCitybuf::CreateMultiLineString(
      _fbb,
      line_strings__);
}

struct Ring FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4
  };
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct RingBuilder {
  typedef Ring Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(Ring::VT_INDICES, indices);
  }
  explicit RingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ring> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ring>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ring> CreateRing(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  RingBuilder builder_(_fbb);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Ring> CreateRingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *indices = nullptr) {
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return flatCitybuf::CreateRing(
      _fbb,
      indices__);
}

struct Surface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RINGS = 4,
    VT_SEMANTIC_OBJECT_ID = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Ring>> *rings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Ring>> *>(VT_RINGS);
  }
  uint32_t semantic_object_id() const {
    return GetField<uint32_t>(VT_SEMANTIC_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RINGS) &&
           verifier.VerifyVector(rings()) &&
           verifier.VerifyVectorOfTables(rings()) &&
           VerifyField<uint32_t>(verifier, VT_SEMANTIC_OBJECT_ID, 4) &&
           verifier.EndTable();
  }
};

struct SurfaceBuilder {
  typedef Surface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Ring>>> rings) {
    fbb_.AddOffset(Surface::VT_RINGS, rings);
  }
  void add_semantic_object_id(uint32_t semantic_object_id) {
    fbb_.AddElement<uint32_t>(Surface::VT_SEMANTIC_OBJECT_ID, semantic_object_id, 0);
  }
  explicit SurfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Surface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Surface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Surface> CreateSurface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Ring>>> rings = 0,
    uint32_t semantic_object_id = 0) {
  SurfaceBuilder builder_(_fbb);
  builder_.add_semantic_object_id(semantic_object_id);
  builder_.add_rings(rings);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Surface> CreateSurfaceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Ring>> *rings = nullptr,
    uint32_t semantic_object_id = 0) {
  auto rings__ = rings ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Ring>>(*rings) : 0;
  return flatCitybuf::CreateSurface(
      _fbb,
      rings__,
      semantic_object_id);
}

struct MultiSurface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MultiSurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *>(VT_SURFACES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           verifier.EndTable();
  }
};

struct MultiSurfaceBuilder {
  typedef MultiSurface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_surfaces(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces) {
    fbb_.AddOffset(MultiSurface::VT_SURFACES, surfaces);
  }
  explicit MultiSurfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MultiSurface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MultiSurface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MultiSurface> CreateMultiSurface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces = 0) {
  MultiSurfaceBuilder builder_(_fbb);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MultiSurface> CreateMultiSurfaceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Surface>>(*surfaces) : 0;
  return flatCitybuf::CreateMultiSurface(
      _fbb,
      surfaces__);
}

struct CompositeSurface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CompositeSurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *>(VT_SURFACES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           verifier.EndTable();
  }
};

struct CompositeSurfaceBuilder {
  typedef CompositeSurface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_surfaces(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces) {
    fbb_.AddOffset(CompositeSurface::VT_SURFACES, surfaces);
  }
  explicit CompositeSurfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CompositeSurface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CompositeSurface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CompositeSurface> CreateCompositeSurface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces = 0) {
  CompositeSurfaceBuilder builder_(_fbb);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CompositeSurface> CreateCompositeSurfaceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Surface>>(*surfaces) : 0;
  return flatCitybuf::CreateCompositeSurface(
      _fbb,
      surfaces__);
}

struct Shell FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShellBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>> *>(VT_SURFACES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           verifier.EndTable();
  }
};

struct ShellBuilder {
  typedef Shell Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_surfaces(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces) {
    fbb_.AddOffset(Shell::VT_SURFACES, surfaces);
  }
  explicit ShellBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Shell> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Shell>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Shell> CreateShell(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Surface>>> surfaces = 0) {
  ShellBuilder builder_(_fbb);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Shell> CreateShellDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Surface>> *surfaces = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Surface>>(*surfaces) : 0;
  return flatCitybuf::CreateShell(
      _fbb,
      surfaces__);
}

struct Solid FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SolidBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHELLS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Shell>> *shells() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Shell>> *>(VT_SHELLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHELLS) &&
           verifier.VerifyVector(shells()) &&
           verifier.VerifyVectorOfTables(shells()) &&
           verifier.EndTable();
  }
};

struct SolidBuilder {
  typedef Solid Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shells(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Shell>>> shells) {
    fbb_.AddOffset(Solid::VT_SHELLS, shells);
  }
  explicit SolidBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Solid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Solid>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Solid> CreateSolid(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Shell>>> shells = 0) {
  SolidBuilder builder_(_fbb);
  builder_.add_shells(shells);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Solid> CreateSolidDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Shell>> *shells = nullptr) {
  auto shells__ = shells ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Shell>>(*shells) : 0;
  return flatCitybuf::CreateSolid(
      _fbb,
      shells__);
}

struct MultiSolid FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MultiSolidBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHELLS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>> *shells() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>> *>(VT_SHELLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHELLS) &&
           verifier.VerifyVector(shells()) &&
           verifier.VerifyVectorOfTables(shells()) &&
           verifier.EndTable();
  }
};

struct MultiSolidBuilder {
  typedef MultiSolid Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shells(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>>> shells) {
    fbb_.AddOffset(MultiSolid::VT_SHELLS, shells);
  }
  explicit MultiSolidBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MultiSolid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MultiSolid>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MultiSolid> CreateMultiSolid(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>>> shells = 0) {
  MultiSolidBuilder builder_(_fbb);
  builder_.add_shells(shells);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MultiSolid> CreateMultiSolidDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Solid>> *shells = nullptr) {
  auto shells__ = shells ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Solid>>(*shells) : 0;
  return flatCitybuf::CreateMultiSolid(
      _fbb,
      shells__);
}

struct CompositeSolid FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CompositeSolidBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHELLS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>> *shells() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>> *>(VT_SHELLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHELLS) &&
           verifier.VerifyVector(shells()) &&
           verifier.VerifyVectorOfTables(shells()) &&
           verifier.EndTable();
  }
};

struct CompositeSolidBuilder {
  typedef CompositeSolid Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shells(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>>> shells) {
    fbb_.AddOffset(CompositeSolid::VT_SHELLS, shells);
  }
  explicit CompositeSolidBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CompositeSolid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CompositeSolid>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CompositeSolid> CreateCompositeSolid(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatCitybuf::Solid>>> shells = 0) {
  CompositeSolidBuilder builder_(_fbb);
  builder_.add_shells(shells);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CompositeSolid> CreateCompositeSolidDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatCitybuf::Solid>> *shells = nullptr) {
  auto shells__ = shells ? _fbb.CreateVector<::flatbuffers::Offset<flatCitybuf::Solid>>(*shells) : 0;
  return flatCitybuf::CreateCompositeSolid(
      _fbb,
      shells__);
}

struct SemanticObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SemanticObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ATTRIBUTES = 6,
    VT_CHILDREN = 8,
    VT_PARENT = 10
  };
  flatCitybuf::SemanticSurfaceType type() const {
    return static_cast<flatCitybuf::SemanticSurfaceType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ATTRIBUTES);
  }
  const ::flatbuffers::Vector<uint32_t> *children() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_CHILDREN);
  }
  uint32_t parent() const {
    return GetField<uint32_t>(VT_PARENT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           VerifyField<uint32_t>(verifier, VT_PARENT, 4) &&
           verifier.EndTable();
  }
};

struct SemanticObjectBuilder {
  typedef SemanticObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(flatCitybuf::SemanticSurfaceType type) {
    fbb_.AddElement<uint8_t>(SemanticObject::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> attributes) {
    fbb_.AddOffset(SemanticObject::VT_ATTRIBUTES, attributes);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> children) {
    fbb_.AddOffset(SemanticObject::VT_CHILDREN, children);
  }
  void add_parent(uint32_t parent) {
    fbb_.AddElement<uint32_t>(SemanticObject::VT_PARENT, parent, 0);
  }
  explicit SemanticObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SemanticObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SemanticObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SemanticObject> CreateSemanticObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    flatCitybuf::SemanticSurfaceType type = flatCitybuf::SemanticSurfaceType_RoofSurface,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> attributes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> children = 0,
    uint32_t parent = 0) {
  SemanticObjectBuilder builder_(_fbb);
  builder_.add_parent(parent);
  builder_.add_children(children);
  builder_.add_attributes(attributes);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SemanticObject> CreateSemanticObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    flatCitybuf::SemanticSurfaceType type = flatCitybuf::SemanticSurfaceType_RoofSurface,
    const std::vector<uint8_t> *attributes = nullptr,
    const std::vector<uint32_t> *children = nullptr,
    uint32_t parent = 0) {
  auto attributes__ = attributes ? _fbb.CreateVector<uint8_t>(*attributes) : 0;
  auto children__ = children ? _fbb.CreateVector<uint32_t>(*children) : 0;
  return flatCitybuf::CreateSemanticObject(
      _fbb,
      type,
      attributes__,
      children__,
      parent);
}

inline bool VerifyBoundaries(::flatbuffers::Verifier &verifier, const void *obj, Boundaries type) {
  switch (type) {
    case Boundaries_NONE: {
      return true;
    }
    case Boundaries_MultiPoint: {
      auto ptr = reinterpret_cast<const flatCitybuf::MultiPoint *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_MultiLineString: {
      auto ptr = reinterpret_cast<const flatCitybuf::MultiLineString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_MultiSurface: {
      auto ptr = reinterpret_cast<const flatCitybuf::MultiSurface *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_CompositeSurface: {
      auto ptr = reinterpret_cast<const flatCitybuf::CompositeSurface *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_Solid: {
      auto ptr = reinterpret_cast<const flatCitybuf::Solid *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_MultiSolid: {
      auto ptr = reinterpret_cast<const flatCitybuf::MultiSolid *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundaries_CompositeSolid: {
      auto ptr = reinterpret_cast<const flatCitybuf::CompositeSolid *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBoundariesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBoundaries(
        verifier,  values->Get(i), types->GetEnum<Boundaries>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatCitybuf::CityFBFeature *GetCityFBFeature(const void *buf) {
  return ::flatbuffers::GetRoot<flatCitybuf::CityFBFeature>(buf);
}

inline const flatCitybuf::CityFBFeature *GetSizePrefixedCityFBFeature(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatCitybuf::CityFBFeature>(buf);
}

inline bool VerifyCityFBFeatureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatCitybuf::CityFBFeature>(nullptr);
}

inline bool VerifySizePrefixedCityFBFeatureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatCitybuf::CityFBFeature>(nullptr);
}

inline void FinishCityFBFeatureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatCitybuf::CityFBFeature> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCityFBFeatureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatCitybuf::CityFBFeature> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatCitybuf

#endif  // FLATBUFFERS_GENERATED_FCBFEATURE_FLATCITYBUF_H_
